// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/kaynetik/go/pkg/mod/github.com/cosmos/cosmos-sdk@v0.50.9/client/tx_config.go

// Package mini_oracle is a generated GoMock package.
package mini_oracle

import (
	reflect "reflect"

	signing "cosmossdk.io/x/tx/signing"
	client "github.com/cosmos/cosmos-sdk/client"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	tx "github.com/cosmos/cosmos-sdk/types/tx"
	signing0 "github.com/cosmos/cosmos-sdk/types/tx/signing"
	signing1 "github.com/cosmos/cosmos-sdk/x/auth/signing"
	gomock "github.com/golang/mock/gomock"
)

// MockTxEncodingConfig is a mock of TxEncodingConfig interface.
type MockTxEncodingConfig struct {
	ctrl     *gomock.Controller
	recorder *MockTxEncodingConfigMockRecorder
}

// MockTxEncodingConfigMockRecorder is the mock recorder for MockTxEncodingConfig.
type MockTxEncodingConfigMockRecorder struct {
	mock *MockTxEncodingConfig
}

// NewMockTxEncodingConfig creates a new mock instance.
func NewMockTxEncodingConfig(ctrl *gomock.Controller) *MockTxEncodingConfig {
	mock := &MockTxEncodingConfig{ctrl: ctrl}
	mock.recorder = &MockTxEncodingConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxEncodingConfig) EXPECT() *MockTxEncodingConfigMockRecorder {
	return m.recorder
}

// MarshalSignatureJSON mocks base method.
func (m *MockTxEncodingConfig) MarshalSignatureJSON(arg0 []signing0.SignatureV2) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalSignatureJSON", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalSignatureJSON indicates an expected call of MarshalSignatureJSON.
func (mr *MockTxEncodingConfigMockRecorder) MarshalSignatureJSON(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalSignatureJSON", reflect.TypeOf((*MockTxEncodingConfig)(nil).MarshalSignatureJSON), arg0)
}

// TxDecoder mocks base method.
func (m *MockTxEncodingConfig) TxDecoder() types0.TxDecoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxDecoder")
	ret0, _ := ret[0].(types0.TxDecoder)
	return ret0
}

// TxDecoder indicates an expected call of TxDecoder.
func (mr *MockTxEncodingConfigMockRecorder) TxDecoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxDecoder", reflect.TypeOf((*MockTxEncodingConfig)(nil).TxDecoder))
}

// TxEncoder mocks base method.
func (m *MockTxEncodingConfig) TxEncoder() types0.TxEncoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxEncoder")
	ret0, _ := ret[0].(types0.TxEncoder)
	return ret0
}

// TxEncoder indicates an expected call of TxEncoder.
func (mr *MockTxEncodingConfigMockRecorder) TxEncoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxEncoder", reflect.TypeOf((*MockTxEncodingConfig)(nil).TxEncoder))
}

// TxJSONDecoder mocks base method.
func (m *MockTxEncodingConfig) TxJSONDecoder() types0.TxDecoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxJSONDecoder")
	ret0, _ := ret[0].(types0.TxDecoder)
	return ret0
}

// TxJSONDecoder indicates an expected call of TxJSONDecoder.
func (mr *MockTxEncodingConfigMockRecorder) TxJSONDecoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxJSONDecoder", reflect.TypeOf((*MockTxEncodingConfig)(nil).TxJSONDecoder))
}

// TxJSONEncoder mocks base method.
func (m *MockTxEncodingConfig) TxJSONEncoder() types0.TxEncoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxJSONEncoder")
	ret0, _ := ret[0].(types0.TxEncoder)
	return ret0
}

// TxJSONEncoder indicates an expected call of TxJSONEncoder.
func (mr *MockTxEncodingConfigMockRecorder) TxJSONEncoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxJSONEncoder", reflect.TypeOf((*MockTxEncodingConfig)(nil).TxJSONEncoder))
}

// UnmarshalSignatureJSON mocks base method.
func (m *MockTxEncodingConfig) UnmarshalSignatureJSON(arg0 []byte) ([]signing0.SignatureV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalSignatureJSON", arg0)
	ret0, _ := ret[0].([]signing0.SignatureV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalSignatureJSON indicates an expected call of UnmarshalSignatureJSON.
func (mr *MockTxEncodingConfigMockRecorder) UnmarshalSignatureJSON(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalSignatureJSON", reflect.TypeOf((*MockTxEncodingConfig)(nil).UnmarshalSignatureJSON), arg0)
}

// MockTxConfig is a mock of TxConfig interface.
type MockTxConfig struct {
	ctrl     *gomock.Controller
	recorder *MockTxConfigMockRecorder
}

// MockTxConfigMockRecorder is the mock recorder for MockTxConfig.
type MockTxConfigMockRecorder struct {
	mock *MockTxConfig
}

// NewMockTxConfig creates a new mock instance.
func NewMockTxConfig(ctrl *gomock.Controller) *MockTxConfig {
	mock := &MockTxConfig{ctrl: ctrl}
	mock.recorder = &MockTxConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxConfig) EXPECT() *MockTxConfigMockRecorder {
	return m.recorder
}

// MarshalSignatureJSON mocks base method.
func (m *MockTxConfig) MarshalSignatureJSON(arg0 []signing0.SignatureV2) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalSignatureJSON", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalSignatureJSON indicates an expected call of MarshalSignatureJSON.
func (mr *MockTxConfigMockRecorder) MarshalSignatureJSON(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalSignatureJSON", reflect.TypeOf((*MockTxConfig)(nil).MarshalSignatureJSON), arg0)
}

// NewTxBuilder mocks base method.
func (m *MockTxConfig) NewTxBuilder() client.TxBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTxBuilder")
	ret0, _ := ret[0].(client.TxBuilder)
	return ret0
}

// NewTxBuilder indicates an expected call of NewTxBuilder.
func (mr *MockTxConfigMockRecorder) NewTxBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTxBuilder", reflect.TypeOf((*MockTxConfig)(nil).NewTxBuilder))
}

// SignModeHandler mocks base method.
func (m *MockTxConfig) SignModeHandler() *signing.HandlerMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignModeHandler")
	ret0, _ := ret[0].(*signing.HandlerMap)
	return ret0
}

// SignModeHandler indicates an expected call of SignModeHandler.
func (mr *MockTxConfigMockRecorder) SignModeHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignModeHandler", reflect.TypeOf((*MockTxConfig)(nil).SignModeHandler))
}

// SigningContext mocks base method.
func (m *MockTxConfig) SigningContext() *signing.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SigningContext")
	ret0, _ := ret[0].(*signing.Context)
	return ret0
}

// SigningContext indicates an expected call of SigningContext.
func (mr *MockTxConfigMockRecorder) SigningContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SigningContext", reflect.TypeOf((*MockTxConfig)(nil).SigningContext))
}

// TxDecoder mocks base method.
func (m *MockTxConfig) TxDecoder() types0.TxDecoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxDecoder")
	ret0, _ := ret[0].(types0.TxDecoder)
	return ret0
}

// TxDecoder indicates an expected call of TxDecoder.
func (mr *MockTxConfigMockRecorder) TxDecoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxDecoder", reflect.TypeOf((*MockTxConfig)(nil).TxDecoder))
}

// TxEncoder mocks base method.
func (m *MockTxConfig) TxEncoder() types0.TxEncoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxEncoder")
	ret0, _ := ret[0].(types0.TxEncoder)
	return ret0
}

// TxEncoder indicates an expected call of TxEncoder.
func (mr *MockTxConfigMockRecorder) TxEncoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxEncoder", reflect.TypeOf((*MockTxConfig)(nil).TxEncoder))
}

// TxJSONDecoder mocks base method.
func (m *MockTxConfig) TxJSONDecoder() types0.TxDecoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxJSONDecoder")
	ret0, _ := ret[0].(types0.TxDecoder)
	return ret0
}

// TxJSONDecoder indicates an expected call of TxJSONDecoder.
func (mr *MockTxConfigMockRecorder) TxJSONDecoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxJSONDecoder", reflect.TypeOf((*MockTxConfig)(nil).TxJSONDecoder))
}

// TxJSONEncoder mocks base method.
func (m *MockTxConfig) TxJSONEncoder() types0.TxEncoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxJSONEncoder")
	ret0, _ := ret[0].(types0.TxEncoder)
	return ret0
}

// TxJSONEncoder indicates an expected call of TxJSONEncoder.
func (mr *MockTxConfigMockRecorder) TxJSONEncoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxJSONEncoder", reflect.TypeOf((*MockTxConfig)(nil).TxJSONEncoder))
}

// UnmarshalSignatureJSON mocks base method.
func (m *MockTxConfig) UnmarshalSignatureJSON(arg0 []byte) ([]signing0.SignatureV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalSignatureJSON", arg0)
	ret0, _ := ret[0].([]signing0.SignatureV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalSignatureJSON indicates an expected call of UnmarshalSignatureJSON.
func (mr *MockTxConfigMockRecorder) UnmarshalSignatureJSON(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalSignatureJSON", reflect.TypeOf((*MockTxConfig)(nil).UnmarshalSignatureJSON), arg0)
}

// WrapTxBuilder mocks base method.
func (m *MockTxConfig) WrapTxBuilder(arg0 types0.Tx) (client.TxBuilder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapTxBuilder", arg0)
	ret0, _ := ret[0].(client.TxBuilder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WrapTxBuilder indicates an expected call of WrapTxBuilder.
func (mr *MockTxConfigMockRecorder) WrapTxBuilder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapTxBuilder", reflect.TypeOf((*MockTxConfig)(nil).WrapTxBuilder), arg0)
}

// MockTxBuilder is a mock of TxBuilder interface.
type MockTxBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockTxBuilderMockRecorder
}

// MockTxBuilderMockRecorder is the mock recorder for MockTxBuilder.
type MockTxBuilderMockRecorder struct {
	mock *MockTxBuilder
}

// NewMockTxBuilder creates a new mock instance.
func NewMockTxBuilder(ctrl *gomock.Controller) *MockTxBuilder {
	mock := &MockTxBuilder{ctrl: ctrl}
	mock.recorder = &MockTxBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxBuilder) EXPECT() *MockTxBuilderMockRecorder {
	return m.recorder
}

// AddAuxSignerData mocks base method.
func (m *MockTxBuilder) AddAuxSignerData(arg0 tx.AuxSignerData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuxSignerData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuxSignerData indicates an expected call of AddAuxSignerData.
func (mr *MockTxBuilderMockRecorder) AddAuxSignerData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuxSignerData", reflect.TypeOf((*MockTxBuilder)(nil).AddAuxSignerData), arg0)
}

// GetTx mocks base method.
func (m *MockTxBuilder) GetTx() signing1.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx")
	ret0, _ := ret[0].(signing1.Tx)
	return ret0
}

// GetTx indicates an expected call of GetTx.
func (mr *MockTxBuilderMockRecorder) GetTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockTxBuilder)(nil).GetTx))
}

// SetFeeAmount mocks base method.
func (m *MockTxBuilder) SetFeeAmount(amount types0.Coins) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFeeAmount", amount)
}

// SetFeeAmount indicates an expected call of SetFeeAmount.
func (mr *MockTxBuilderMockRecorder) SetFeeAmount(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeeAmount", reflect.TypeOf((*MockTxBuilder)(nil).SetFeeAmount), amount)
}

// SetFeeGranter mocks base method.
func (m *MockTxBuilder) SetFeeGranter(feeGranter types0.AccAddress) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFeeGranter", feeGranter)
}

// SetFeeGranter indicates an expected call of SetFeeGranter.
func (mr *MockTxBuilderMockRecorder) SetFeeGranter(feeGranter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeeGranter", reflect.TypeOf((*MockTxBuilder)(nil).SetFeeGranter), feeGranter)
}

// SetFeePayer mocks base method.
func (m *MockTxBuilder) SetFeePayer(feePayer types0.AccAddress) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFeePayer", feePayer)
}

// SetFeePayer indicates an expected call of SetFeePayer.
func (mr *MockTxBuilderMockRecorder) SetFeePayer(feePayer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeePayer", reflect.TypeOf((*MockTxBuilder)(nil).SetFeePayer), feePayer)
}

// SetGasLimit mocks base method.
func (m *MockTxBuilder) SetGasLimit(limit uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGasLimit", limit)
}

// SetGasLimit indicates an expected call of SetGasLimit.
func (mr *MockTxBuilderMockRecorder) SetGasLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasLimit", reflect.TypeOf((*MockTxBuilder)(nil).SetGasLimit), limit)
}

// SetMemo mocks base method.
func (m *MockTxBuilder) SetMemo(memo string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMemo", memo)
}

// SetMemo indicates an expected call of SetMemo.
func (mr *MockTxBuilderMockRecorder) SetMemo(memo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemo", reflect.TypeOf((*MockTxBuilder)(nil).SetMemo), memo)
}

// SetMsgs mocks base method.
func (m *MockTxBuilder) SetMsgs(msgs ...types0.Msg) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMsgs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMsgs indicates an expected call of SetMsgs.
func (mr *MockTxBuilderMockRecorder) SetMsgs(msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMsgs", reflect.TypeOf((*MockTxBuilder)(nil).SetMsgs), msgs...)
}

// SetSignatures mocks base method.
func (m *MockTxBuilder) SetSignatures(signatures ...signing0.SignatureV2) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range signatures {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSignatures", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSignatures indicates an expected call of SetSignatures.
func (mr *MockTxBuilderMockRecorder) SetSignatures(signatures ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSignatures", reflect.TypeOf((*MockTxBuilder)(nil).SetSignatures), signatures...)
}

// SetTimeoutHeight mocks base method.
func (m *MockTxBuilder) SetTimeoutHeight(height uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeoutHeight", height)
}

// SetTimeoutHeight indicates an expected call of SetTimeoutHeight.
func (mr *MockTxBuilderMockRecorder) SetTimeoutHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeoutHeight", reflect.TypeOf((*MockTxBuilder)(nil).SetTimeoutHeight), height)
}

// MockExtendedTxBuilder is a mock of ExtendedTxBuilder interface.
type MockExtendedTxBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedTxBuilderMockRecorder
}

// MockExtendedTxBuilderMockRecorder is the mock recorder for MockExtendedTxBuilder.
type MockExtendedTxBuilderMockRecorder struct {
	mock *MockExtendedTxBuilder
}

// NewMockExtendedTxBuilder creates a new mock instance.
func NewMockExtendedTxBuilder(ctrl *gomock.Controller) *MockExtendedTxBuilder {
	mock := &MockExtendedTxBuilder{ctrl: ctrl}
	mock.recorder = &MockExtendedTxBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedTxBuilder) EXPECT() *MockExtendedTxBuilderMockRecorder {
	return m.recorder
}

// SetExtensionOptions mocks base method.
func (m *MockExtendedTxBuilder) SetExtensionOptions(extOpts ...*types.Any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range extOpts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetExtensionOptions", varargs...)
}

// SetExtensionOptions indicates an expected call of SetExtensionOptions.
func (mr *MockExtendedTxBuilderMockRecorder) SetExtensionOptions(extOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtensionOptions", reflect.TypeOf((*MockExtendedTxBuilder)(nil).SetExtensionOptions), extOpts...)
}
